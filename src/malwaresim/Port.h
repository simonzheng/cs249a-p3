/**
 * Port information for a device.
 *
 * Copyright (c) 2004-7 David R.Cheriton, All rights reserved.
 *
 * Edited by Mark Linton for CS 249A Fall 2014.
 */

#ifndef PORT_H
#define PORT_H

using fwk::Ptr;

class Device;

/**
 * Port is a value type containing an anti-malware rating and
 * connection information for a port on a device. The port's otherDevice
 * is the device to which the port is connected, the port's otherPort is
 * the otherDevice's port.
 *
 * If port 0 on device A is connected to port 1 on device B then
 * A->port(0) is { rating: 0.0, otherDevice: B, otherPort: 1 } and
 * B->port(1) is { rating: 0.0, otherDevice: A, otherPort: 0 }.
 *
 * Port does not generate any notifications or try to ensure the connection
 * information is consistent. These tasks must be handled at a higher level
 * (normally Device).
 */
class Port {
public:

    /**
     * Default constructor initializes the port fields to default values.
     * It isn't really necessary to initialize otherDevice_ if it is
     * a Ptr<Device> but if for some reason one wanted to use a raw pointer
     * then it must be initialized to null.
     */
    Port() :
        rating_(0.0),
        otherDevice_(null),
        otherPort_(0)
    {
        // Nothing else to do.
    }

    /** Copy constructor. */
    Port(const Port& port) :
        rating_(port.rating_),
        otherDevice_(port.otherDevice_),
        otherPort_(port.otherPort_)
    {
        // Nothing else to do.
    }

    /**
     * Destructor ensures the connected device is null.
     */
    ~Port() {
        otherDevice_ = null;
    }


    /**
     * Anti-malware rating for this port.
     */
    MalwareStrength rating() const {
        return rating_;
    }

    /**
     * Modify the anti-malware rating for this port.
     */
    void ratingIs(const MalwareStrength rating) {
        rating_.valueIs(rating);
    }


    /**
     * Device connected to this port or null if not connected.
     */
    const Ptr<Device>& otherDevice() const {
        return otherDevice_;
    }

    /**
     * Connected device's port number or 0 if not connected.
     */
    U32 otherPort() const {
        return otherPort_;
    }

    /**
     * Modify the connection for this port.
     */
    void connectionIs(const Ptr<Device>& device, const U32 port) {
        otherDevice_ = device.ptr();
        otherPort_ = port;
    }

private:

    MalwareStrength rating_;

    Ptr<Device> otherDevice_;

    U32 otherPort_;

};

#endif
