//
// Stub for main program for Malware Simulation problem.
//
// Copy this file to main.cxx and then edit it to implement your solution.
//

#include "fwk/fwk.h"

#include "MalwareStrength.h"
#include "Port.h"
#include "Device.h"
#include "Network.h"

#include <iostream>
#include <fstream>
#include <sstream>
#include <queue>
#include <unordered_map>
#include <vector>

using std::cin;
using std::cout;
using std::endl;
using std::istream;
using std::ifstream;
using std::ostream;
using std::stringstream;

using std::queue;
using std::unordered_map;
using std::vector;

using std::to_string;

using fwk::Ptr;

//
// Class for main simulation logic.
//
class MalwareSim : public fwk::PtrInterface {
public:

    static Ptr<MalwareSim> instanceNew() {
        return new MalwareSim();
    }


    //
    // Read data in, parse it, excute commands.
    //
    void evalStream(istream& input) {
        // TODO: Implement this.
    }

private:

    MalwareSim() {
        // Nothing else to do.
    }

    ~MalwareSim() {
        // Nothing to do.
    }

};


//
// The main program takes one argument, which is the file name with the rules.
// The rules are then executed and the appropriate statistics are printed
// to the console.
//
int main(int argc, const char* argv[]) {
    if (argc <= 1) {
        cout << "Missing input file" << endl;
        return 1;
    }

    if (argc > 2) {
        cout << "Extraneous arguments after input file" << endl;
        return 1;
    }

    string arg = argv[1];

    const auto sim = MalwareSim::instanceNew();

    if (arg == "-") {
        sim->evalStream(cin);
    } else {
        ifstream input(arg);
        if (input.good()) {
            sim->evalStream(input);
        } else {
            cout << "Error opening " << arg << endl;
        }
    }

    return 0;
}
