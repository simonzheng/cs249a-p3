// Network.h
// Copyright (c) 2004-7 David R.Cheriton, All rights reserved.
//
// Edited by Mark Linton for CS 249A Fall 2014.
//

#ifndef NETWORK_H
#define NETWORK_H

#include <list>
#include <unordered_map>

using fwk::BaseNotifiee;
using fwk::NamedInterface;
using fwk::NotifierLib::post;
using fwk::Ptr;

class Network : public NamedInterface {
public:

    class Notifiee : public BaseNotifiee<Network> {
    public:

        void notifierIs(const Ptr<Network>& network) {
            connect(network, this);
        }


        /** Notification that a device is added to the network. */
        virtual void onDeviceNew(const Ptr<Device>& device) { }

        /** Notification that a device is removed from the network. */
        virtual void onDeviceDel(const Ptr<Device>&  device) { }

    };

protected:

    typedef std::unordered_map< string, Ptr<Device> > DeviceMap;

    typedef std::list<Notifiee*> NotifieeList;

public:

    typedef DeviceMap::iterator iterator;
    typedef DeviceMap::const_iterator const_iterator;
    typedef DeviceMap::size_type size_type;


    static Ptr<Network> instanceNew(string name) {
        return new Network(name);
    }


    Network(const Network&) = delete;

    void operator =(const Network&) = delete;


    size_type deviceCount() const {
        return deviceMap_.size();
    }

    const_iterator deviceIter() {
        return deviceMap_.cbegin();
    }

    const_iterator deviceIterEnd() {
        return deviceMap_.cend();
    }

    Ptr<Device> device(const string& name) {
        const auto i = deviceMap_.find(name);
        if (i != deviceMap_.end()) {
            return i->second;
        }

        return null;
    }

    void deviceIs(const Ptr<Device>& device) {
        const string name = device->name();
        if (! (deviceMap_.insert(DeviceMap::value_type(name, device)).second) ) {
            throw fwk::NameInUseException(name);
        }

        device->networkIs(this);

        post(this, &Notifiee::onDeviceNew, device);
    }

    Ptr<Device> deviceDel(const string& name) {
        const auto iter = deviceMap_.find(name);
        if (iter == deviceMap_.end()) {
            return null;
        }

        auto device = iter->second;

        deviceDel(iter);

        return device;
    }

    iterator deviceDel(DeviceMap::const_iterator iter) {
        const auto device = iter->second;
        const auto next = deviceMap_.erase(iter);

        device->networkIs(null);

        post(this, &Notifiee::onDeviceDel, device);

        return next;
    }

    NotifieeList& notifiees() {
        return notifiees_;
    }

protected:

    DeviceMap deviceMap_;

    NotifieeList notifiees_;


    explicit Network(const string& name) :
        NamedInterface(name)
    {
        // Nothing else to do.
    }

    ~Network() {
        for (auto i = deviceMap_.cbegin(); i != deviceMap_.cend(); ++i) {
            post(this, &Notifiee::onDeviceDel, i->second);
        }
    }

};

#endif
